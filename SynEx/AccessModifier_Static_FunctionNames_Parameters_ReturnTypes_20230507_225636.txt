ClassroomApiHelper
	public static T GetUserSelection(IList<T> itemList, string displayMessage)
	public static async ValueTask<string> SelectClassroomAndGetId()
	public static async ValueTask<Course> GetCourse(string courseId)
	public static async ValueTask<IList<Course>> GetAllCourses()
	public static async ValueTask<Student> GetStudent(string courseId, string userId)
	public static async ValueTask<IList<CourseWork>> ListCourseWork(string courseId)
	public static async ValueTask<IList<StudentSubmission>> ListStudentSubmissions(string courseId, string courseWorkId)
	public static async ValueTask PrintActiveStudentsInClassroom(string courseId)
	public static async ValueTask<IList<Student>> GetActiveStudents(string courseId)
	public static string GetCourseName(string courseId)
	public static async ValueTask<DateTime?> GetFileModifiedTimeFromGoogleDrive(string fileId)
	public static Dictionary<string, DateTime> GetAllDesktopFilesModifiedTime(string rootDirectory)
	public static async ValueTask<Dictionary<string, DateTime?>> GetAllGoogleDriveFilesModifiedTime(string courseId)
FileDownloadService
	private static bool ShouldDownloadFile(string fileId, string fileName, Dictionary<string, DateTime?> googleDriveFilesModifiedTime, Dictionary<string, DateTime?> desktopFilesModifiedTime)
	public static async Task DownloadAllFilesFromClassroom(string courseId)
	public static async Task DownloadCourseWorkFiles(string courseId, CourseWork courseWork, string courseDirectory, Dictionary<string, DateTime?> googleDriveFilesModifiedTime, Dictionary<string, DateTime?> desktopFilesModifiedTime)
	public static async Task DownloadAttachmentsForSubmission(StudentSubmission submission, string destinationDirectory, Student student, Dictionary<string, DateTime?> googleDriveFilesModifiedTime, Dictionary<string, DateTime?> desktopFilesModifiedTime)
	public static async Task DownloadFileFromGoogleDrive(string fileId, string fileName, string destinationDirectory, GoogleDriveFile file)
	public static async Task<string?> GetFileMimeTypeFromGoogleDrive(string fileId)
	private static (string, string) GetExportMimeTypeAndFileExtension(string? mimeType, string fileName)
	private static void HandleDownloadProgress(IDownloadProgress progress, string fileName, bool isSkipped)
	public static async Task<GoogleDriveFile?> GetFileFromGoogleDrive(string fileId)
DataCollector
	public static async Task CollectData()
PromptAnalysis
	public static void CalculateTokens()
TokenCounterUtil
	public static void GPT3EncoderSharp(String countText)
	public static void SharpTokenCounter(String countText)
	private static int CountInts(List<int> list)
DriveServiceUtil
	public static void DownloadWithStatus(this FilesResource.GetRequest request, MemoryStream memoryStream)
	public static void DownloadWithStatus(this FilesResource.ExportRequest request, MemoryStream memoryStream)
GoogleApiUtil
	public static void InitializeGoogleServices()
	public static void RefreshAccessToken(UserCredential credential)
OpenAiApiUtil
	public IOpenAIService Connect()
	public static async Task RunSimpleCompletionStreamTest(IOpenAIService sdk)
StudentEvaluation
	public static void LookForUserFolder()
	private static Dictionary<string, List<string>>? GetAllUniqueAssignmentNames()
	public static async Task<Dictionary<string, List<Tuple<bool, string, List<string>>>>?> ExtractStructuredTextFromAssignments(string courseId)
	public static void GenerateStudentAssignment(string mainFolderPath)
	private static void SetHorizontalAlignment(ExcelWorksheet worksheet)
	private static void SetHeaderRow(ExcelWorksheet worksheet)
	private static void AddStudentData(ExcelWorksheet worksheet, string[] studentFolders)
	private static void SetConditionalFormatting(ExcelWorksheet worksheet)
StudentTextExtractor
	public async Task ExtractAndPrintTextData()
	public async Task<Dictionary<string, List<Tuple<bool, string, List<string>>>>?> ExtractTextFromStudentAssignments(string courseId)
	private string ExtractTextFromFile(string filePath)
	private string ExtractTextFromTxt(string filePath)
	private string ExtractTextFromDocx(string filePath)
	private void SaveTextToWordFile(List<Tuple<bool, string, List<string>>> textData, string filePath)
	private string RemoveInvalidXmlChars(string input)
ConsoleUtil
	public static void WriteLine(string value, ConsoleColor color)
DirectoryUtil
	public static string ShortenPath(string path, int maxLength = MaxPathLength)
	public static string ShortenFileName(string fileName, int allowedLength)
	private static (string, bool) CreateDirectory(string parentDirectory, string folderName)
	public static string CreateUserDirectoryOnDesktop()
	public static string CreateCourseDirectory(string courseId)
	public static string CreateStudentDirectory(string courseDirectory, Student student)
	public static string CreateAssignmentDirectory(string studentDirectory, CourseWork courseWork, string courseId)
	public static string SanitizeFolderName(string folderName)
MainProgram
	private static async Task Main(string[] args)
	public static async Task Start()
